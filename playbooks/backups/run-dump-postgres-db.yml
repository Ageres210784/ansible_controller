#!/usr/bin/env -S ansible-playbook -e @vars/extra.yaml
#
#
# Playbook for copying postgres dump database script, and config crontab for it.
# executable script:
#
# > ./run-dump-postgres-db.yml
#
---
- name: Install a script for backup database
  hosts: backup_hosts
  become: yes
  become_user: root
  tasks:
    - name: Ensure variables
      ansible.builtin.set_fact:
        database_name: "{{ database_name | default ('database') }}"
        inform_system: "{{ inform_system | default ('is') }}"
        pg_password: "{{ pg_password | default ('pg_password') }}"
        pg_user: "{{ pg_user | default ('postgres') }}"
        pg_version: "{{ pg_version | default ('latest') }}"
        remote_db_address: "{{ remote_db_address | default ('127.0.0.1') }}"
        remote_db_port: "{{ remote_db_port | default ('5432') }}"
        tmp_container_name: "{{ tmp_container_name | default('tmp-postgres-backup') }}"
      tags:
        - always
    - name: Ensure complex variables
      ansible.builtin.set_fact:
        db_base_path: "{{ db_base_path | default ('/var/backups/' + inform_system + '/Full/' + database_name) }}"
        pg_bash_exec: "{{ pg_bash_exec | default ('/usr/bin/docker run -t --rm --name ' + tmp_container_name + ' postgres:' + pg_version + ' bash -c') }}"
      tags:
        - always
    - name: Ensure script variable
      ansible.builtin.set_fact:
        bakup_script: |
          #!/bin/bash

          echo "Starting backup"
          DB_BASE_PATH={{ db_base_path }}
          DB_DATE=$(date +%Y-%m-%d)
          DB_FULL_NAME=${DB_BASE_PATH}/{{ inform_system }}-{{ database_name }}-${DB_DATE}
          echo "Ensure dirs"
          mkdir -p $DB_BASE_PATH
          echo "Create backup with db full name ${DB_FULL_NAME}.tar.gz"
          {{ pg_bash_exec }} 'PGPASSWORD={{ pg_password }} pg_dump -Fp -d {{ database_name }} -h {{ remote_db_address }} -p {{ remote_db_port }} -U {{ pg_user }}' | gzip > $DB_FULL_NAME.tar.gz
          echo "Create hash with db full name ${DB_FULL_NAME}.tar.gz and hash name ${DB_FULL_NAME}.hash"
          echo $(sha1sum $DB_FULL_NAME.tar.gz | cut -d' ' -f1) > $DB_FULL_NAME.hash
          echo "End backup"
      tags:
        - always

    - name: Ensure backup directory
      ansible.builtin.file:
        path: "{{ db_base_path }}"
        state: directory
        mode: '0755'

    - name: Creating a script for backup
      ansible.builtin.copy:
        dest: "/root/backup_{{ database_name }}.sh"
        content: "{{ bakup_script }}"
        mode: '0700'

    - name: Set daily cron-job with backup
      ansible.builtin.cron:
        name: "Backup database {{ database_name }}"
        minute: "0"
        hour: "0"
        job: "/root/backup_{{ database_name }}.sh 2>&1 >> /var/log/backup_db_{{ database_name }}.log"

    - name: Explicitly run backup script
      ansible.builtin.shell:
        cmd: "/root/backup_{{ database_name }}.sh"
      tags:
        - never
        - backup
